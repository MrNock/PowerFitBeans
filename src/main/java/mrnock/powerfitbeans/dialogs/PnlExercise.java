package mrnock.powerfitbeans.dialogs;

import java.awt.Color;
import java.io.Serializable;
import java.util.ArrayList;
import mrnock.events.MiEventPlayVideo;
import mrnock.events.MiEventPlayVideoListener;
import mrnock.events.MiEventSwipe;
import mrnock.events.MiEventSwipeListener;

/**
 * This PnlExercise class extends from JPanel and it is used to create the
 * cards with the details of each activity (username, exercise ID, status and a
 * timestamp for the completion date.
 *
 * Once clicked the button, the app will play the video with the exercise.
 *
 * @author Richard Navarro {@literal <richardnavarro@paucasesnovescifp.cat>}
 * @version 4.0 Final version to submit for Unit 4 (Desarrollo de Interfaces)
 * @since 1.5
 */
public class PnlExercise extends javax.swing.JPanel implements Serializable {

    enum IconExercise {
        NOT_ATTEMPTED_YET, PENDING_REVIEW, COMPLETE
    };
    private int posX = 0;
    protected String videoFile;
    ArrayList<MiEventSwipeListener> listeners = new ArrayList<>();
    ArrayList<MiEventPlayVideoListener> listenersPlayVideo = new ArrayList<>();

    /**
     * Creates new form PnlExercise
     */
    public PnlExercise() {
        initComponents();
    }

    public PnlExercise(String idExercise, IconExercise icon, String user, String timeStamp, String videoFile) {
        initComponents();

        this.lblExerciseID.setText(idExercise);
        this.lblUserName.setText(user);
        this.lblTimeStamp.setText(timeStamp);
        this.videoFile = videoFile;

        int size = 30;
        switch (icon) {
            case NOT_ATTEMPTED_YET -> {
                icnStatusIcon.setSvgImage("images/hourglass-line.svg", size, size);
            }
            case PENDING_REVIEW -> {
                icnStatusIcon.setSvgImage("images/history-2.svg", size, size);
            }
            case COMPLETE -> {
                icnStatusIcon.setSvgImage("images/like.svg", size, size);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblExerciseID = new javax.swing.JLabel();
        lblStatusIcon = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblTimeStamp = new javax.swing.JLabel();
        icnStatusIcon = new mrnock.tools.SVGImage();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setToolTipText("Details for the exercise");
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        lblExerciseID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExerciseID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblExerciseID.setText("Exercici ID");
        lblExerciseID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblExerciseID, gridBagConstraints);

        lblStatusIcon.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblStatusIcon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStatusIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblStatusIcon, gridBagConstraints);

        lblUserName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUserName.setText("nombreUsuario");
        lblUserName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblUserName, gridBagConstraints);

        lblTimeStamp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblTimeStamp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimeStamp.setText("timeStamp");
        lblTimeStamp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblTimeStamp, gridBagConstraints);

        icnStatusIcon.setToolTipText("");
        add(icnStatusIcon, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (evt.getXOnScreen() - posX > 0) {
            fireMiEventoSwipeAction(MiEventSwipe.Direction.RIGHT);
            System.out.println("Swipe Derecha");
        } else if (evt.getXOnScreen() - posX < 0) {
            fireMiEventoSwipeAction(MiEventSwipe.Direction.LEFT);
            System.out.println("Swipe Izquierda");
        } else {
            fireMiEventoPlayVideo();
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.setBackground(new Color(255, 217, 0));
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        this.setBackground(new Color(242,242,242));
    }//GEN-LAST:event_formMouseExited

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        posX = evt.getXOnScreen();
    }//GEN-LAST:event_formMousePressed

    private void fireMiEventoPlayVideo() {
        for (MiEventPlayVideoListener l : listenersPlayVideo) {
            MiEventPlayVideo evt = new MiEventPlayVideo(this, videoFile);
            l.miEventoPlayVideoActionPerformed(evt);
        }
    }

    ;
    private void fireMiEventoSwipeAction(MiEventSwipe.Direction d) {
        for (MiEventSwipeListener l : listeners) {
            MiEventSwipe evt = new MiEventSwipe(this, this.lblExerciseID.getText(), d);
            l.miEventoSwipeActionPerformed(evt);
        }
    }

    public void addMiEventoSwipe(MiEventSwipeListener l) {
        listeners.add(l);
    }

    public void removeMiEventoSwipe(MiEventSwipe l) {
        listeners.remove(l);
    }

    public void addMiEventoPlayVideo(MiEventPlayVideoListener l) {
        listenersPlayVideo.add(l);
    }

    public void removeMiEventoPlayVideo(MiEventPlayVideoListener l) {
        listenersPlayVideo.remove(l);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private mrnock.tools.SVGImage icnStatusIcon;
    private javax.swing.JLabel lblExerciseID;
    private javax.swing.JLabel lblStatusIcon;
    private javax.swing.JLabel lblTimeStamp;
    private javax.swing.JLabel lblUserName;
    // End of variables declaration//GEN-END:variables
}
