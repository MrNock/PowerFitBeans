package mrnock.powerfitbeans.dialogs;

import java.awt.Image;
import java.io.Serializable;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import mrnock.events.MiEventSwipe;
import mrnock.events.MiEventSwipeListener;

/**
 *
 * @author Richard Navarro {@literal <richardnavarro@paucasesnovescifp.cat>}
 */
public class PnlExercise extends javax.swing.JPanel implements Serializable {

    enum IconExercise {
        NOT_ATTEMPTED_YET, PENDING_REVIEW, COMPLETE
    };
    private int posX = 0;
    ArrayList<MiEventSwipeListener> listeners = new ArrayList<>();

    /**
     * Creates new form PnlExercise
     */
    public PnlExercise() {
        initComponents();
    }

    public PnlExercise(String idExercise, IconExercise icon, String user, String timeStamp) {
        initComponents();
        
//        String pattern = new SimpleDateFormat("EEE, dd MMM yyyy @ HH:mm").format(new Date()); //Tue, 16 Nov 2023 @ 18:24
//        String formattedDate = pattern.formatted(timeStamp);
        
        this.lblExerciseID.setText(idExercise);
        this.lblUserName.setText(user);
        this.lblTimeStamp.setText(timeStamp);

        int size = 30;
        switch (icon) {
            case NOT_ATTEMPTED_YET: {
                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/images/notAttemptedYet.png"));
                Image image = imageIcon.getImage();
                Image newimg = image.getScaledInstance(size, size, java.awt.Image.SCALE_SMOOTH);
                this.lblStatusIcon.setIcon(new ImageIcon(newimg));
            }
            break;
            case PENDING_REVIEW: {
                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/images/pendingReview.png"));
                Image image = imageIcon.getImage();
                Image newimg = image.getScaledInstance(size, size, java.awt.Image.SCALE_SMOOTH);
                this.lblStatusIcon.setIcon(new ImageIcon(newimg));
            }
            break;
            case COMPLETE: {
                ImageIcon imageIcon = new ImageIcon(getClass().getResource("/images/complete.png"));
                Image image = imageIcon.getImage();
                Image newimg = image.getScaledInstance(size, size, java.awt.Image.SCALE_SMOOTH);
                this.lblStatusIcon.setIcon(new ImageIcon(newimg));
            }

            break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblExerciseID = new javax.swing.JLabel();
        lblStatusIcon = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblTimeStamp = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        lblExerciseID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExerciseID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblExerciseID.setText("Exercici ID");
        lblExerciseID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblExerciseID, gridBagConstraints);

        lblStatusIcon.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblStatusIcon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStatusIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblStatusIcon, gridBagConstraints);

        lblUserName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUserName.setText("nombreUsuario");
        lblUserName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblUserName, gridBagConstraints);

        lblTimeStamp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblTimeStamp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimeStamp.setText("timeStamp");
        lblTimeStamp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblTimeStamp, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        System.out.println("posX=" + posX + " evt.pos=" + evt.getXOnScreen());
        if (evt.getXOnScreen() - posX > 0) {
            fireMiEventoSwipeAction(MiEventSwipe.Direction.RIGHT);
        } else if (evt.getXOnScreen() - posX < 0) {
            fireMiEventoSwipeAction(MiEventSwipe.Direction.LEFT);
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        posX = evt.getXOnScreen();
    }//GEN-LAST:event_formMousePressed

    private void fireMiEventoSwipeAction(MiEventSwipe.Direction d) {
        for (MiEventSwipeListener l : listeners) {
            MiEventSwipe evt = new MiEventSwipe(this, this.lblExerciseID.getText(), d);
            l.miEventoActionPerformed(evt);
        }
    }

    public void addMiEventoSwipe(MiEventSwipeListener l) {
        listeners.add(l);
    }

    public void removeMiEventoSwipe(MiEventSwipe l) {
        listeners.remove(l);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblExerciseID;
    private javax.swing.JLabel lblStatusIcon;
    private javax.swing.JLabel lblTimeStamp;
    private javax.swing.JLabel lblUserName;
    // End of variables declaration//GEN-END:variables
}
