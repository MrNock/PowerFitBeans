package mrnock.powerfitbeans.dialogs;

import java.awt.Color;
import java.io.Serializable;
import java.util.ArrayList;
import mrnock.events.MyEventPlayVideo;
import mrnock.events.MyEventSwipe;
import mrnock.events.MyEventPlayVideoListener;
import mrnock.events.MyEventSwipeListener;

/**
 * <p>
 * This PnlExercise class extends from JPanel and it is used to create the cards
 * with the details of each activity (username, exercise ID, status and a
 * timestamp for the completion date.</p>
 *
 * <p>
 * Once clicked the button, the app will play the video with the exercise.</p>
 *
 * @author Richard Navarro {@literal <richardnavarro@paucasesnovescifp.cat>}
 * @version 6.0 Final version to submit for Unit 6 (Desarrollo de Interfaces)
 * @since 1.5
 */
public class PnlExercise extends javax.swing.JPanel implements Serializable {

    /**
     * <p>
     * List with the possible status values of an exercise.</p>
     */
    enum IconExercise {
        /**
         * <p>
         * NOT_ATTEMPTED_YET icon when an exercise is pending to be
         * attempted.</p>
         */
        NOT_ATTEMPTED_YET,
        /**
         * <p>
         * PENDING_REVIEW icon when an exercise is pending to be reviewed by an
         * instructor.</p>
         */
        PENDING_REVIEW,
        /**
         * <p>
         * COMPLETE icon when an exercise is completed.</p>
         */
        COMPLETE
    };
    private int posX = 0;
    /**
     * <p>
     * Protected String variable for the video file name.</p>
     */
    protected String videoFile;
    ArrayList<MyEventSwipeListener> listeners = new ArrayList<>();
    ArrayList<MyEventPlayVideoListener> listenersPlayVideo = new ArrayList<>();

    /**
     * <p>
     * Creates new form PnlExercise with the default settings.</p>
     */
    public PnlExercise() {
        initComponents();
    }

    /**
     * <p>
     * Creates a new form PnlExercise.</p>
     *
     * @param idExercise Exercise identifier.
     * @param icon with the status of the Exercise.
     * @param user information for the user.
     * @param timeStamp time stamp when the exercise was completed.
     * @param videoFile video file string with the name.
     */
    public PnlExercise(String idExercise, IconExercise icon, String user, String timeStamp, String videoFile) {
        initComponents();

        this.lblExerciseID.setText(idExercise);
        this.lblUserName.setText(user);
        this.lblTimeStamp.setText(timeStamp);
        this.videoFile = videoFile;

        int size = 30;
        switch (icon) {
            case NOT_ATTEMPTED_YET -> {
                icnStatusIcon.setSvgImage("images/hourglass-line.svg", size, size);
            }
            case PENDING_REVIEW -> {
                icnStatusIcon.setSvgImage("images/history-2.svg", size, size);
            }
            case COMPLETE -> {
                icnStatusIcon.setSvgImage("images/like.svg", size, size);
            }
        }
    }

    /**
     * <p>
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.</p>
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblExerciseID = new javax.swing.JLabel();
        lblStatusIcon = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblTimeStamp = new javax.swing.JLabel();
        icnStatusIcon = new mrnock.tools.SVGImage();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setToolTipText("Details for the exercise");
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        lblExerciseID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExerciseID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblExerciseID.setText("Exercici ID");
        lblExerciseID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblExerciseID, gridBagConstraints);

        lblStatusIcon.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblStatusIcon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStatusIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblStatusIcon, gridBagConstraints);

        lblUserName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUserName.setText("nombreUsuario");
        lblUserName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblUserName, gridBagConstraints);

        lblTimeStamp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblTimeStamp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTimeStamp.setText("timeStamp");
        lblTimeStamp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblTimeStamp, gridBagConstraints);

        icnStatusIcon.setToolTipText("");
        add(icnStatusIcon, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    /**
     * <p>
     * This method is used to set the posX variable to the X coordinate of the
     * mouse after it has been pressed to be compared with the X coordinate when
     * the mouse is released to identify the swipe direction. This method works
     * in combination with formMousePressed().</p>
     */
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if (evt.getXOnScreen() - posX > 0) {
            fireMiEventoSwipeAction(MyEventSwipe.Direction.RIGHT);
        } else if (evt.getXOnScreen() - posX < 0) {
            fireMiEventoSwipeAction(MyEventSwipe.Direction.LEFT);
        } else {
            fireMiEventoPlayVideo();
        }
    }//GEN-LAST:event_formMouseReleased

    /**
     * <p>
     * This method is used to change the background color, giving some feedback
     * to the user when hovering the mouse over the element, improving the
     * usability. This method works in combination with formMouseExited().</p>
     */
    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.setBackground(new Color(255, 217, 0));
    }//GEN-LAST:event_formMouseEntered

    /**
     * <p>
     * This method is used to reset the background color to its original, giving
     * some feedback to the user when the mouse is exiting the element,
     * improving the usability. This method works in combination with
     * formMouseEntered().</p>
     */
    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        this.setBackground(new Color(242, 242, 242));
    }//GEN-LAST:event_formMouseExited

    /**
     * <p>
     * This method is used to set the posX variable to the X coordinate of the
     * mouse after it has been pressed to be compared with the X coordinate when
     * the mouse is released to identify the swipe direction. This method works
     * in combination with formMouseReleased().</p>
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        posX = evt.getXOnScreen();
    }//GEN-LAST:event_formMousePressed

    /**
     * <p>
     * This method is used to trigger the video player event.</p>
     */
    private void fireMiEventoPlayVideo() {
        for (MyEventPlayVideoListener l : listenersPlayVideo) {
            MyEventPlayVideo evt = new MyEventPlayVideo(this, videoFile);
            l.miEventoPlayVideoActionPerformed(evt);
        }
    }

    /**
     * <p>
     * This method is used to trigger the swipe event.</p>
     */
    private void fireMiEventoSwipeAction(MyEventSwipe.Direction d) {
        for (MyEventSwipeListener l : listeners) {
            MyEventSwipe evt = new MyEventSwipe(this, this.lblExerciseID.getText(), d);
            l.miEventoSwipeActionPerformed(evt);
        }
    }

    /**
     * <p>
     * This method is used to subscribe the MyEventSwipeListener event.</p>
     *
     * @param l MyEventSwipeListener to be subscribed.
     */
    public void addMiEventoSwipe(MyEventSwipeListener l) {
        listeners.add(l);
    }

    /**
     * <p>
     * This method is used to remove the MyEventSwipe subscription.</p>
     *
     * @param l MyEventSwipe to be unsubscribed.
     */
    public void removeMiEventoSwipe(MyEventSwipe l) {
        listeners.remove(l);
    }

    /**
     * <p>
     * This method is used to subscribe the MyEventPlayVideoListener event.</p>
     *
     * @param l MyEventPlayVideoListener to be subscribed.
     */
    public void addMiEventoPlayVideo(MyEventPlayVideoListener l) {
        listenersPlayVideo.add(l);
    }

    /**
     * <p>
     * This method is used to remove the MyEventPlayVideoListener
     * subscription.</p>
     *
     * @param l MyEventPlayVideoListener to be unsubscribed.
     */
    public void removeMiEventoPlayVideo(MyEventPlayVideoListener l) {
        listenersPlayVideo.remove(l);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private mrnock.tools.SVGImage icnStatusIcon;
    private javax.swing.JLabel lblExerciseID;
    private javax.swing.JLabel lblStatusIcon;
    private javax.swing.JLabel lblTimeStamp;
    private javax.swing.JLabel lblUserName;
    // End of variables declaration//GEN-END:variables
}
